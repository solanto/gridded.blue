---
import publicClient from "../utilities/public-client"
import accumulateAuthorMedia, { whitelistFromSearchParams } from "../utilities/accumulate-author-media"
import uriToLink from "../utilities/uri-to-link"
import client from "../utilities/client"
import { Agent, type AppBskyFeedGetAuthorFeed } from "@atproto/api"
import { TokenRefreshError } from "@atproto/oauth-client-node"
import stateParams from "../utilities/state-params"
import { Image } from "astro:assets"
import * as SessionGetter from "../utilities/session-getter"
import Layout from "../layouts/Layout.astro"
import Header from "../components/Header.astro"
import { XRPCError } from "@atproto/xrpc"
import "@atcute/bluesky/lexicons"

const { profile } = Astro.params as {
	profile: string
}

const cursor = Astro.url.searchParams.get("cursor")

const whitelist = whitelistFromSearchParams(Astro.url.searchParams)

if (!Object.values(whitelist).some(value => value)) {
	Astro.url.searchParams.set("reply", "on")
	Astro.url.searchParams.set("unlabeled", "on")

	return Astro.redirect(Astro.url)
}

const { reply: _, ...labelWhitelist } = whitelist

if (!Object.values(labelWhitelist).some(value => value)) {
	Astro.url.searchParams.set("unlabeled", "on")

	return Astro.redirect(Astro.url)
}

const { isProfilePublic } = Astro.locals

const identity = await SessionGetter.identity(Astro.session as any)

let getAuthorFeed =
	(params: AppBskyFeedGetAuthorFeed.QueryParams) => publicClient.get(
		"app.bsky.feed.getAuthorFeed",
		{ params }
	) as Promise<AppBskyFeedGetAuthorFeed.Response>

const loginPromptRedirect = Astro.redirect(
	"/?" + stateParams(Astro.url.searchParams, profile)
)

if (identity)
	try {
		const agent = new Agent(
			await client.restore(identity.did)
		)

		getAuthorFeed = agent.getAuthorFeed
	} catch (error) {
		if (error instanceof TokenRefreshError)
			return loginPromptRedirect
	}
else if (!isProfilePublic) return loginPromptRedirect

let data

const accumulatorArguments = [
	getAuthorFeed,
	profile,
	36,
	whitelist,
	undefined
] satisfies Parameters<typeof accumulateAuthorMedia>

const {
	data: profileData
} = await publicClient.get(
	"app.bsky.actor.getProfile",
	{
		params: {
			actor: profile as string
		}
	}
)

try {
	data = await accumulateAuthorMedia(
		...accumulatorArguments,
		cursor ?? undefined
	)
} catch (error) {
	if (error instanceof XRPCError) {
		console.log({...error})

		data = await accumulateAuthorMedia(
			...accumulatorArguments
		)
	} else throw error
}

const { media, cursor: nextCursor } = data

const nextParams = new URLSearchParams(Astro.url.searchParams)

if (nextCursor) nextParams.set("cursor", nextCursor)
else nextParams.delete("cursor")
---

<Layout>
	<Header identity={identity} />
	<main>
		<form
			action="/profile"
			class="query-form"
		>
			<div class="toggles">
				<label
					for="reply-toggle"
					class="check-button"
				>
					<input
						type="checkbox"
						id="reply-toggle"
						name="reply"
						checked={whitelist.reply},
					/>
					replies
				</label>
				<fieldset class="labels">
					<label
						for="unlabeled-toggle"
						class="check-button"
					>
						<input
							type="checkbox"
							id="unlabeled-toggle"
							name="unlabeled"
							checked={whitelist.unlabeled},
						/>
						unlabeled
					</label>
					<label
						for="suggestive-toggle"
						class="check-button important"
					>
						<input
							type="checkbox"
							id="suggestive-toggle"
							name="suggestive"
							checked={whitelist.suggestive}
						/>
						suggestive
					</label>
					<label
						for="nudity-toggle"
						class="check-button important"
					>
						<input
							type="checkbox"
							id="nudity-toggle"
							name="nudity"
							checked={whitelist.nudity}
						/>
						nudity
					</label>
					<label
						for="adult-toggle"
						class="check-button important"
					>
						<input
							type="checkbox"
							id="adult-toggle"
							name="adult"
							checked={whitelist.adult}
						/>
						adult
					</label>
				</fieldset>
			</div>
			<fieldset class="actor-section">
				<div class="actor-input">
					<input
						name="profile"
						type="search"
						value={profile}
						placeholder="username.bsky.social"
						autocorrect="off"
						autocapitalize="off"
						spellcheck="false"
						id="actor-input-box"
						list="actor-datalist"
					/>
					<datalist id="actor-datalist"></datalist>
				</div>
				<button type="submit" id="submit-button">view</button>
			</fieldset>
		</form>
		<section class="profile-info">
			<Image
				src={profileData.banner ?? "/images/blank.png"}
				alt=""
				width="1500"
				height="500"
				class="banner"
			/>
			<Image
				src={profileData.avatar ?? "/images/blank.png"}
				alt=""
				width={12}
				height={12}
				class="profile-icon"
			/>
			<h1>{profileData.displayName}</h1>
			<p class="bio">{profileData.description}</p>
		</section>
		<details>
			<summary>share profile</summary>
			<p>
				Hit the <i class="share">share</i> button in your browser or copy and
				paste a link to this page for anyone to view this profile
				with the filters you've selected. ☺️
			</p>
		</details>
		<ol class="feed">
			{
				media.map(
					({ thumbnail, alt, uri, flag }) => (
						<li class={flag ?? null}>
							{
								flag == "multiple" ?
									<span class="flag">multiple images: </span>
									: flag == "video" ?
										<span class="flag">video: </span>
										: <></>
							}
							<a
								href={uriToLink(
									profile,
									uri
								)}
							>
								<Image
									src={thumbnail}
									alt={alt}
									inferSize={true}
								/>
							</a>
						</li>
					)
				)
			}
		</ol>
		{ nextCursor === null ? <></> : <a class="link-button" href={`/${profile}?${nextParams}`}>next</a> }
	</main>
</Layout>

<script>
	import publicClient from "../utilities/public-client"
	import { scrollIntoView } from "seamless-scroll-polyfill"
	import type { IScrollConfig } from "seamless-scroll-polyfill/lib/scroll-step.d.ts"
	import { isValidHandle } from "@atproto/syntax"

	const actorDatalist = document.getElementById("actor-datalist")
	const actorInputBox = document.getElementById("actor-input-box")
	const submitButton = document.getElementById("submit-button")

	actorInputBox
		?.addEventListener("input",
			({ target }) => {
				if ((target as HTMLInputElement).value.trim())
					publicClient.get(
						"app.bsky.actor.searchActorsTypeahead",
						{ params: { q: (target as HTMLInputElement).value } }
					).then(
						({ data: { actors } }) => {
							console.log(actors.length == 0)

							if (
								actors.length == 0
								|| !actors
									.map(({ handle }) => handle)
									.includes((target as HTMLInputElement).value)
							)
								submitButton?.setAttribute("disabled", "true")
							else submitButton?.removeAttribute("disabled")

							const options = actors.map(
								({ handle }) =>  {
									const option = document.createElement("option")
									option.setAttribute("value", handle)

									return option
								}
							)

							if (actorDatalist) {
								actorDatalist.textContent = ""

								for (const option of options)
									actorDatalist.appendChild(option)
							}
						}
					)
				else submitButton?.setAttribute("disabled", "true")
			}
		)

	const scrollOptions: ScrollIntoViewOptions = {
		block: "start",
		inline: "nearest",
		behavior: "smooth"
	}

	const scrollConfig: IScrollConfig = {
		duration: 300
	}

	actorInputBox
		?.addEventListener("focusin",
			() => scrollIntoView(actorInputBox, scrollOptions, scrollConfig)
		)

	actorInputBox
		?.addEventListener("focusout",
			() => scrollIntoView(document.body, scrollOptions, scrollConfig)
		)
</script>